local jumpForce = 1250
local gravity = -80

function init(self)
	msg.post(".", "acquire_input_focus")

	self.onGround = false
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	self.anim = nil
	self.current_animation = nil
	self.health = 2
	self.score = 0
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		msg.post("#sprite", "play_animation", {id = anim})
		-- remember which animation is playing
		self.anim = anim
	end
end


function update(self, dt)
	--print(self.velocity)
	local gravity = vmath.vector3(0, gravity, 0)
	
	if not self.onGround then
		self.velocity = self.velocity + gravity
	end
	go.set_position(go.get_position() + self.velocity *dt)

	self.correction = vmath.vector3()
	self.onGround = false
end

local function handle_obstacle_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.onGround = true
		if self.anim == hash("jump") then
			play_animation(self, hash("idle") )
		end
		msg.post("/background", "parallax", {enable = false})
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- check that the object is something we consider an obstacle
		if message.group == hash("platform") then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	if self.onGround then
		-- set take-off speed
		self.velocity.y = jumpForce
		-- play animation
		play_animation(self, hash("jump"))
		msg.post("/background", "parallax", {enable = true})
		msg.post("/controller", "jump")
		self.score = self.score + 1
		msg.post("/hud#ui", "score", {score = self.score})		
		end
end

local function jump2(self)
	go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_PINGPONG, go.get_position().y + 200, go.EASING_LINEAR, 0.5)
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") then
		if action.pressed then
			jump(self)
			
			--msg.post("/platrormBase", "jump", {})
		elseif action.released then
			--abort_jump(self)
		end
	elseif action_id == hash("attack") and action.pressed then
		--play_animation(self, hash("attack"))
		--go.animate("#sprite", "play_animation", go.PLAYBACK_ONCE_FORWARD, hash("attack"), go.EASING_LINEAR, 1, 0, play_animation(self, hash("idle")))

		go.set("sword", "euler.z", 0)
		go.animate("sword", "rotation.z", go.PLAYBACK_ONCE_PINGPONG, -10, go.EASING_LINEAR, 0.5)
		
		sprite.play_flipbook("#sprite", hash("attack"), function()
			sprite.play_flipbook("#sprite", hash("idle"))
		end)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
